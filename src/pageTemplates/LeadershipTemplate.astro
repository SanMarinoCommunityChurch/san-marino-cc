---
import { urlFor } from "../lib/sanity";
import { joinNames, capitalizeFirstLetter, slugify } from "../utils/format";
import { staffByType, eldersAndDeaconsByType } from "../lib/people";
import { PortableText } from "astro-portabletext";
// import ImageOpt from "../components/ImageOpt.astro";
import { Image } from "astro:assets";
import "../styles/rich-text.css";

const { content } = Astro.props;
const { leadershipTypes, richContent } = content;
---

<Fragment>
  <div class="cluster sticky">
    <div class="small-title">Jump to:</div>
    <a
      href={`#${slugify(leadershipTypes[0].heading)}`}
      class="text-step-4 heading-link">{leadershipTypes[0].heading}</a
    >
    <a
      href={`#${slugify(leadershipTypes[1].heading)}`}
      class="text-step-4 heading-link">{leadershipTypes[1].heading}</a
    >
    <a href="#about" class="text-step-4 heading-link">About</a>
  </div>
  <div class="watch">
    <section id={slugify(leadershipTypes[0].heading)}>
      <h2 class="sr-only">{leadershipTypes[0].heading}</h2>
      <div class="text-step-2 colored-link">
        <PortableText value={leadershipTypes[0].text} />
      </div>
      {
        staffByType.map((type) => {
          if (type.type === "admin") {
            type.type = "Administrative";
          }
          if (type.type === "clergy") {
            type.type = "Pastoral";
          }

          return (
            <section class="columns" id={type.type}>
              <div>
                <h3 class="text-step-3">
                  {`${capitalizeFirstLetter(type.type)} Staff`}
                </h3>
              </div>
              <ul class="grid">
                {type.entries.map((person) => (
                  <li>
                    <a
                      href={`/who-we-are/leadership/${person.slug}`}
                      class="person"
                    >
                      {person.image && (
                        <div class="frame square">
                          <Image
                            src={urlFor(person.image)
                              .width(400)
                              .height(400)
                              .auto("format")
                              .url()}
                            width={400}
                            height={400}
                            format="webp"
                            alt={joinNames(person.name)}
                          />
                        </div>
                      )}
                      <div class="flow">
                        <h3 class="text-step-1">
                          {[
                            person.name.title,
                            person.name.firstName,
                            person.name.lastName,
                          ].join(" ")}
                        </h3>
                        <p class="text-step--1">
                          <em>{person.role}</em>
                        </p>
                      </div>
                    </a>
                  </li>
                ))}
              </ul>
            </section>
          );
        })
      }
    </section>
    <section id={slugify(leadershipTypes[1].heading)}>
      <h2 class="sr-only">{leadershipTypes[1].heading}</h2>
      <div class="text-step-2 colored-link">
        <PortableText value={leadershipTypes[1].text} />
      </div>
      {
        eldersAndDeaconsByType.map((type) => (
          <section class="columns" id={type.type}>
            <div>
              <h3 class="text-step-3">{`${capitalizeFirstLetter(
                type.type
              )}s`}</h3>
            </div>
            <ul class="grid">
              {type.entries.map((person) => (
                <li>
                  <div class="person">
                    {person.image && (
                      <div class="frame square">
                        <Image
                          src={urlFor(person.image)
                            .width(400)
                            .height(400)
                            .auto("format")
                            .url()}
                          width={400}
                          height={400}
                          format="webp"
                          alt={joinNames(person.name)}
                        />
                      </div>
                    )}
                    <div class="flow">
                      <h3 class="text-step-1">
                        {[
                          person.name.title,
                          person.name.firstName,
                          person.name.lastName,
                        ].join(" ")}
                      </h3>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </section>
    <section id="about" class="rich-text">
      <PortableText value={richContent} />
    </section>
  </div>
</Fragment>

<style>
  .sticky {
    position: sticky;
    background: white;
    z-index: 20;
    padding-block: 1.5rem;
    top: 5rem;
    /* border-bottom: 1px solid var(--color-primary-300); */
  }

  .heading-link {
    color: var(--color-primary-800);
    text-decoration: none;
    font-family: var(--font-secondary);
    font-weight: var(--font-weight-header);
    transition: all 0.2s ease;
  }

  .heading-link:hover {
    text-decoration: underline;
    color: var(--color-primary-800);
    opacity: 1 !important;
  }

  .sticky.cluster {
    --cluster-space: 3rem;
  }

  .columns {
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    gap: 2rem;
    padding-block-start: var(--space-2xl);
  }

  .columns > :first-child {
    grid-column: 1 / 3;
  }

  .columns > :last-child {
    grid-column: 3 / 10;
  }

  .columns h2 {
    margin-top: var(--space-m);
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    row-gap: 1rem;
    column-gap: 3rem;
  }

  .person {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    text-align: center;
    height: 100%;
    text-decoration: none;
    background-color: transparent;
    padding: var(--space-m);
    border-radius: var(--rounded-corners);
    transition: background-color 0.3s ease;
  }

  .person:hover {
    background-color: var(--color-primary-100);
  }

  .person .frame img {
    transition: transform 0.3s ease;
  }

  .person:hover .frame img {
    transform: scale(1.1);
  }

  .person > .flow {
    --flow-space: 0.33rem;
  }

  .frame.square {
    border-radius: 9999px;
    max-width: 8rem;
    margin-bottom: 1rem;
  }

  .watch {
    margin-top: 0 !important;
  }

  .watch [id] {
    scroll-margin-top: 12rem;
  }

  .watch [id] {
    margin-block-start: 2rem;
  }

  .watch [id] {
    border-top: 1px solid var(--color-neutral-100);
    padding-top: var(--space-2xl);
  }

  .watch [id]:nth-of-type(1) {
    border-top: 0;
    padding-top: 0;
  }

  @media (max-width: 768px) {
    .columns > :first-child {
      grid-column: span 9;
    }

    .columns > :last-child {
      grid-column: span 9;
    }

    .grid {
      grid-template-columns: 1fr 1fr;
    }

    .sticky.cluster {
      --cluster-space: 1rem;
    }

    .heading-link {
      font-size: var(--step-1);
    }
  }

  @media (max-width: 640px) {
    .grid {
      grid-template-columns: 1fr;
    }

    .person {
      align-items: flex-start;
      text-align: left;
    }

    .heading-link {
      font-size: var(--step-0);
    }

    .sticky.cluster {
      --cluster-space: 0.5rem;
    }
  }
</style>

<script>
  const headerLinks = document.querySelectorAll(".sticky a");
  const sections = document.querySelectorAll(".watch > section");

  const onIntersect = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const id = entry.target.id;
        headerLinks.forEach((link) => {
          const a = link as HTMLAnchorElement;
          if (a.hash === `#${id}`) {
            a.style.opacity = "1";
          } else {
            a.style.opacity = "0.5";
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(onIntersect, {
    rootMargin: "-60px",
  });

  sections.forEach((el) => {
    observer.observe(el);
  });
</script>
