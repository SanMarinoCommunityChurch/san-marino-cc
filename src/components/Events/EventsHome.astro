---
import { sanityClient, urlFor } from "../../lib/sanity";
import Card from "../Card.astro";
import Button from "../Button.astro";
import DateLabel from "../Events/DateLabel.astro"

const getEvents = async () => {
  const query = `*[_type == "event"] | order(date desc) {
    name,
    date,
    preview,
    eventType,
    location,
    "image": image.asset->,
    "ministry": associatedMinistry->{
      name,
      "image": image.asset->
  },
  }`;
  const data = await sanityClient.fetch(query);
  return data;
};

const events = await getEvents();
---

<section>
  <header><slot name="header" /></header>
  <div class="event-list">
    {
      events.map((event) => (
        <Card 
          title={event.name} 
          img={
            event.image ?
            urlFor(event.image)
            :
            urlFor(event.ministry.image)
          }
        >
          <div slot="label" class="event-date">
            <DateLabel date={event.date} />
          </div>
          <div slot="header" class="small-title event-category">
            {event.eventType}
          </div>
          <p slot="body" class="text-step--1">
            {event.preview}
          </p>
          <div slot="footer" class="location-footer text-step--1 cluster font-header">
            <span class="location-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" height="16" width="16" fill="var(--color-primary-800)"><defs><style>.fa-secondary{opacity:.4}</style></defs><path class="fa-primary" d="M192 144a48 48 0 1 0 0 96 48 48 0 1 0 0-96z"/><path class="fa-secondary" d="M215.7 499.2C267 435 384 279.4 384 192C384 86 298 0 192 0S0 86 0 192c0 87.4 117 243 168.3 307.2c12.3 15.3 35.1 15.3 47.4 0zM192 112a80 80 0 1 1 0 160 80 80 0 1 1 0-160z"/></svg></span>
            <span>{event.location}</span>
          </div>
        </Card>
      ))
    }
    <!-- <Card />
    <Card />
    <Card /> -->
  </div>
  <div class="center-items">
    <Button href="/">See All Events</Button>
  </div>
</section>

<style>
  .event-list {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    padding-block-start: var(--space-2xl);
  }

  .center-items {
    margin-top: var(--space-2xl);
  }

  .location-footer.cluster {
    gap: 4px;
  }

  .location-footer .location-icon {
    display: flex;
  }

  .small-title.event-category {
    display: inline-block;
    color: var(--color-primary-900);
    line-height: 1;
    padding: 4px 6px;
    margin-bottom: 8px;
    background-color: var(--color-primary-100);
    border-radius: var(--rounded-corners-small);
  }
</style>
